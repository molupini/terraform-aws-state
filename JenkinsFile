// IMPORTANT NOTE, USE OF STATE FILES NOT REQUIRED IF USING BACKEND / WORKSPACES 
def refresh = false
pipeline{
    agent any
    parameters {
        string(name: 'deploymentId', defaultValue: '')
    }
    environment{
        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY')
        AWS_REGION = credentials('AWS_REGION')
        TF_IN_AUTOMATION = "true"
    }
    stages{
        stage("Clone"){
            steps{
                // ALWAYS DICARD LOCAL REPO
                echo "======== Clone Repo ========"
                dir("./"){
                    script{
                        try {
                            def file ="./tfremotestate/state.tf"
                            def fileFound = fileExists(file)
                            println("state.tf, exists = ${fileFound}")
                            if(!fileFound){
                                sh "rm -R ./tfremotestate/ -f"
                            } 
                            sh "git init"
                            sh "git config remote.origin.url git@gitlab.com:bcx-sanlam-group/tfremotestate.git"
                            sh "git clone git@gitlab.com:bcx-sanlam-group/tfremotestate.git"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform clone, try again!")
                        }
                    }
                }
            }
        }
        stage("Init"){
            steps{
                // CACHE WORKING PLUGINS 
                echo "======== Executing Init ========"
                dir("./tfremotestate/bin"){
                    script{
                        try {
                            def file = "../../${params.deploymentId}/.terraform/plugins/linux_amd64/lock.json"
                            def fileFound = fileExists(file)
                            println("lock.json, exists = ${fileFound}")
                            if(fileFound){
                                sh "terraform init \
                                -plugin-dir ../../${params.deploymentId}/.terraform/plugins/linux_amd64"
                            } 
                            else {
                                sh "terraform init"
                                sh "cp -r ./.terraform/ ../../${params.deploymentId}/"
                            }
                        } catch (Exception err){
                            sh "rm -R ../../${params.deploymentId}/.terraform/ -f"
                            sh "terraform init \
                            -plugin-dir ''"
                            println(err)
                            throw new Exception("Unable to perform init, try again!")
                        }
                    }
                }
            }
        }
        stage("Validate"){
            steps{
                // VERIFY WORKING HCL / TERRAFORM SOURCE CODE 
                echo "======== Executing Validation ========"
                dir("./tfremotestate/bin"){
                    script{
                        try { 
                            sh "terraform validate"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform validation, try again!")
                        }
                    }
                }
            }
        }
        stage("Plan"){
            steps{
                // PLAN WILL VERIFY IF STATE EXISTS, IF FALSE - OUTPUT TO DEPLOYMENTID FOLDER, IF TRUE - INPUT FROM DEPLOYMENTID FOLDER 
                echo "======== Executing Plan ========"
                dir('./tfremotestate/bin'){
                    script{
                        try { 
                            def file ="../../${params.deploymentId}/terraform.tfstate"
                            def fileFound = fileExists(file)
                            println("terraform.tfstate, exists = ${fileFound}")
                            if(!fileFound){
                                sh "terraform plan \
                                -var 'id=${params.deploymentId}' \
                                -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                                -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                                -var 'aws_region=${AWS_REGION}' \
                                -out ../../${params.deploymentId}/apply.tfplan \
                                -state-out ../../${params.deploymentId}/terraform.tfstate"
                            } else {
                                sh "terraform plan \
                                -var 'id=${params.deploymentId}' \
                                -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                                -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                                -var 'aws_region=${AWS_REGION}' \
                                -out ../../${params.deploymentId}/apply.tfplan \
                                -state ../../${params.deploymentId}/terraform.tfstate"
                            }

                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable perform plan, try again!")
                        }
                    }
                }
            }
        }
        stage("Apply"){
            steps{
                // INPUT REQUIRED IF TO APPLY OR ABOUT WHICH WILL DESTROY 
                // APPLY FALSE - WILL PLAN THE DESTROY AND THEN APPLY
                // APPLY TRUE - SEE BELOW #
                echo "======== Executing Apply ========"
                script {
                    def apply = false
                    try {
                        input message: 'Confirm Apply', ok: 'Apply Config'
                        apply = true
                    } catch (Exception err) {
                        dir('./tfremotestate/bin'){
                            // PLAN DESTROY
                            sh "terraform plan -destroy \
                            -var 'id=${params.deploymentId}' \
                            -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                            -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                            -var 'aws_region=${AWS_REGION}' \
                            -out ../../${params.deploymentId}/destroy.tfplan \
                            -state ../../${params.deploymentId}/terraform.tfstate"
                            // APPLY DESTROY
                            // TODO MIGHT REQUIRE ANOTHER INPUT, IF NECESSARY
                            def file ="../../${params.deploymentId}/destroy.tfplan"
                            def fileFound = fileExists(file)
                            println("destroy.tfplan, exists = ${fileFound}")
                            if(fileFound){
                                sh "terraform apply \
                                -state ../../${params.deploymentId}/terraform.tfstate \
                                ../../${params.deploymentId}/destroy.tfplan"
                            }
                            sh "terraform output -state ../../${params.deploymentId}/terraform.tfstate -json > ${params.deploymentId}-output.json"
                            sh "python3 ./util/helper.py status ${params.deploymentId}"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                    // # APPLY - TRUE, BUILD
                    // IF ANY ERROR IN CATCH FORCE REFRESH OF STATE
                    if(apply){
                        dir('./tfremotestate/bin'){
                            def file ="../../${params.deploymentId}/apply.tfplan"
                            def fileFound = fileExists(file)
                            println("apply.tfplan, exists = ${fileFound}")
                            if(fileFound){
                                try {
                                    sh "terraform apply \
                                    -state ../../${params.deploymentId}/terraform.tfstate \
                                    ../../${params.deploymentId}/apply.tfplan"
                                } catch (Exception err) {
                                    refresh = true
                                }
                            } 
                            sh "terraform output -state ../../${params.deploymentId}/terraform.tfstate -json > ${params.deploymentId}-output.json"
                            sh "python3 ./util/helper.py status ${params.deploymentId}"
                        }
                    }
                }
            }
        }
        stage("Refresh"){
            steps{
                echo "======== Executing Refresh ========"
                dir("./tfremotestate/bin"){
                    script{
                        try { 
                            println("refresh = ${refresh}")
                            if(refresh){
                                sh "terraform refresh \
                                -var 'id=${params.deploymentId}' \
                                -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                                -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                                -var 'aws_region=${AWS_REGION}' \
                                -state ../../${params.deploymentId}/terraform.tfstate"
                                currentBuild.result = 'UNSTABLE'
                            } 
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform refresh, try again!")
                        }
                    }
                }
            }
        }
    }
}
